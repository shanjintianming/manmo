<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/cache   
    http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- <context:annotation-config/>的作用是向Spring容器注册以下四个BeanPostProcessor： AutowiredAnnotationBeanPostProcessor 
		CommonAnnotationBeanPostProcessor PersistenceAnnotationBeanPostProcessor 
		RequiredAnnotationBeanPostProcessor 让系统能够识别相应的注解 由于<context:component-scan 
		base-package=””/>也包含了自动注入上述Bean的功能， 所以<context:annotation-config/> 可以省略。如果两者都进行了配置，则只有前者有效。 -->

	<!-- <context:annotation-config></context:annotation-config> -->

	<!-- 在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件， 如果扫描到有@Component 
		@Controller@Service等这些注解的类，则把这些类注册为bean 有一个use-default-filters属性，改属性默认为true,这就意味着会扫描指定包下的全部的标有@Component的类，并注册成bean. 
		也就是@Component的子注解@Service,@Reposity等 -->
	<context:component-scan base-package="com.server">
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> -->
	</context:component-scan>

	<!-- 导入properties文件 -->
	<!-- <bean id="jdbcproperty" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location" value="classpath:config/properties/db.properties"></property> 
		</bean> -->

	<context:property-placeholder
		location="classpath:com/server/core/property/druidSource.properties"
		ignore-unresolvable="true" />
	<context:property-placeholder
		location="classpath:com/server/core/property/redis.properties"
		ignore-unresolvable="true" />

	<!--（1）如果你有多个数据源需要通过<context:property-placeholder管理，且不愿意放在一个配置文件里，那么一定要加上ignore-unresolvable=“true" -->
	<!--（2）注意新版的（具体从哪个版本开始不清楚，有兴趣可以查一下）JedisPoolConfig的property name，不是maxActive而是maxTotal，而且没有maxWait属性，建议看一下Jedis源码。 -->
	<!-- redis连接池 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive -->
		<property name="maxTotal" value="${redis.maxActive}"></property>
        <!-- 连接池中最大空闲的连接数. -->
		<property name="maxIdle" value="${redis.maxIdle}"></property>
        <!-- 连接池中最少空闲的连接数. -->
        <!-- <property name="minIdle" value="${redis.minIdle}" /> -->
        <!-- 当连接池资源耗尽时，调用者最大阻塞的时间，超时将跑出异常。单位，毫秒数;默认为-1.表示永不超时。高版本：maxWaitMillis，低版本：maxWait -->
        <property name="maxWaitMillis" value="1500" />
        <!-- 连接空闲的最小时间，达到此值后空闲连接将可能会被移除。负值(-1)表示不移除. -->
        <!-- <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" /> -->
        <!-- 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3 -->
        <!-- <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" /> -->
        <!-- “空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1. -->
        <!-- <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" /> -->
        <!-- testOnBorrow:向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。默认为false。建议保持默认值. -->
        <!-- testOnReturn:向连接池“归还”链接时，是否检测“链接”对象的有效性。默认为false。建议保持默认值. -->
        <!-- testWhileIdle:向调用者输出“链接”对象时，是否检测它的空闲超时；默认为false。如果“链接”空闲超时，将会被移除。建议保持默认值. -->
        <!-- whenExhaustedAction:当“连接池”中active数量达到阀值时，即“链接”资源耗尽时，连接池需要采取的手段, 默认为1(0:抛出异常。1:阻塞，直到有可用链接资源。2:强制创建新的链接资源) -->
    </bean>

	<!-- jedis客户端单机版 -->
    <bean id="redisClient" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port}"/>
        <constructor-arg name="password" value="${redis.pass}"/>
        <constructor-arg name="timeout" value="${redis.expiration}"/>
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
    </bean>

	<bean id="redisCacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean class="com.server.core.cache.RedisCache">
					<constructor-arg name="name" value="rediscache"></constructor-arg>
					<constructor-arg name="jedisPool" ref="redisClient"></constructor-arg>
				</bean>
			</set>
		</property>
	</bean>

	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<cache:annotation-driven cache-manager="redisCacheManager" />

	<bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.master.driverClassName}"></property>
		<property name="url" value="${jdbc.master.url}"></property>
		<property name="username" value="${jdbc.master.username}"></property>
		<property name="password" value="${jdbc.master.password}"></property>

		<!-- <property name = "filters" value = "${filters}" /> -->
		<!-- 最大并发连接数 -->
		<!-- <property name = "maxActive" value = "${maxActive}" /> -->
		<!-- 初始化连接数量 -->
		<!-- <property name = "initialSize" value = "${initialSize}" /> -->
		<!-- 配置获取连接等待超时的时间 -->
		<!-- <property name = "maxWait" value = "${maxWait}" /> -->
		<!-- 最小空闲连接数 -->
		<!-- <property name = "minIdle" value = "${minIdle}" /> -->
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<!-- <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" 
			/> -->
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<!-- <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" 
			/> <property name = "validationQuery" value = "${validationQuery}" /> <property 
			name = "testWhileIdle" value = "${testWhileIdle}" /> <property name = "testOnBorrow" 
			value = "${testOnBorrow}" /> <property name = "testOnReturn" value = "${testOnReturn}" 
			/> <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" 
			/> -->
		<!-- 打开 removeAbandoned 功能 -->
		<!-- <property name = "removeAbandoned" value = "${removeAbandoned}" /> -->
		<!-- 1800 秒，也就是 30 分钟 -->
		<!-- <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" 
			/> -->
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<!-- <property name = "logAbandoned" value = "${logAbandoned}" /> -->
	</bean>

	<bean id="transactionManage"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="datasource"></property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="datasource"></property>
		<property name="mapperLocations" value="classpath:com/server/**/mapper/*.xml"></property>
	</bean>

	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property value="com.server.**.dao" name="basePackage" />
	</bean>

	<!-- 支持事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManage" />
	
	<bean class="com.server.core.spring.NettyBeanPostProcessor"></bean>
</beans>
